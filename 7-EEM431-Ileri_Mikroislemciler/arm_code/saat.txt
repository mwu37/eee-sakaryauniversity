#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/interrupt.h"
#include "driverlib/gpio.h"
#include "math.h"
#include "inc/hw_gpio.h"
#include "driverlib/timer.h"
#include "driverlib/timer.c"

int sn1=0;
int sn2=0;
int dk1=0;
int dk2=0;
int st1=0;
int st2=0;

void timerkesmefonksiyonu(void);

void lcd_komut(int x);
void Lcd_Temizle();
void Lcd_init();
void Lcd_SatirveSutunaGit (int a, int  b);
void Lcd_veri_Yaz ( int y );


#define  RS                 GPIO_PIN_0
#define  E                  GPIO_PIN_1
#define  LCDPORT            GPIO_PORTB_BASE



int main(void)
{
uint32_t ui32Period;
    SysCtlClockSet(SYSCTL_SYSDIV_16|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);

    //SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE,GPIO_PIN_6|GPIO_PIN_7);
    GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE,255);
SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0); // timer çevre birimi aktif
TimerConfigure(TIMER0_BASE , TIMER_CFG_PERIODIC); // sürekli çevrim modu, aþaðýya doðru sayýsý
ui32Period = SysCtlClockGet(); // baþlangýç deðeri
TimerLoadSet(TIMER0_BASE , TIMER_A , ui32Period -1); // timer ilk deðeri yükleniyor.
// 32 bitlik sayýcý
IntEnable(INT_TIMER0A);// 1. kesme ayarý
TimerIntEnable(TIMER0_BASE ,TIMER_TIMA_TIMEOUT); // 3. kesme ayarý
IntMasterEnable(); // 2. kesme ayarý

TimerEnable(TIMER0_BASE , TIMER_A); // timer çalýþtý
TimerIntRegister(TIMER0_BASE , TIMER_A , timerkesmefonksiyonu); // Timer kesme fonksiyonu ayarý

   // SysCtlDelay(62500);
    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6|GPIO_PIN_7, 0x00);
    Lcd_init();
    Lcd_Temizle();

 while (1)
 {

 }
}

void timerkesmefonksiyonu()
{
    sn1=sn1+1;
    if(sn1==10)
{
    sn1=0;
    sn2=sn2+1;
    if (sn2==6)
{
    sn2=0;
    dk1=dk1+1;
    if(dk1==10)
{
    dk1=0;
    dk2=dk2+1;
    if(dk2==6)
{
    dk2=0;
    st1=st1+1;
    if (st1==10)
{
    st1=0;
    st2=st2+1;
    if (st2==2)
{
    st2=0;
}
}
}
}
}
}
     Lcd_SatirveSutunaGit (1,0);
     Lcd_veri_Yaz(st2+48);
     Lcd_SatirveSutunaGit (1,1);
     Lcd_veri_Yaz(st1+48);
     Lcd_SatirveSutunaGit (1,2);
     Lcd_veri_Yaz(58);
     Lcd_SatirveSutunaGit (1,3);
     Lcd_veri_Yaz(dk2+48);
     Lcd_SatirveSutunaGit (1,4);
     Lcd_veri_Yaz(dk1+48);
     Lcd_SatirveSutunaGit (1,5);
     Lcd_veri_Yaz(58);
     Lcd_SatirveSutunaGit (1,6);
     Lcd_veri_Yaz(sn2+48);
     Lcd_SatirveSutunaGit (1,7);
     Lcd_veri_Yaz(sn1+48);
}


void lcd_komut(int x)
{
GPIOPinWrite(LCDPORT, 255, x);

GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6 | GPIO_PIN_7, 0x80);
SysCtlDelay(10);
GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6 | GPIO_PIN_7, 0x00);
SysCtlDelay(5000);
}
void Lcd_Temizle()
{
lcd_komut(1);
SysCtlDelay(10000);
}
void Lcd_init()
{
lcd_komut(0x30);
lcd_komut(0x30);
lcd_komut(0x3C);
lcd_komut(0x06);
lcd_komut(0x0F);


}
void Lcd_SatirveSutunaGit (int a, int  b)
{ if (a==1)
    { b=b+128;
       lcd_komut(b);
        }
  else if(a==2)
  {  b=b+192;
     lcd_komut(b);

        }
    }
void Lcd_veri_Yaz ( int y )
{
    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6 | GPIO_PIN_7, 0x40);
    SysCtlDelay(10000);

    GPIOPinWrite(LCDPORT, 255,y);
    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6 | GPIO_PIN_7, 0xC0);
    SysCtlDelay(10);
    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6 | GPIO_PIN_7, 0x40);
    SysCtlDelay(10000);

}
