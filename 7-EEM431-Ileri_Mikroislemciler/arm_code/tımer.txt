#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "inc/hw_gpio.h"
#include "driverlib/interrupt.h"
#include "inc/hw_ints.h"
#include "string.h"
#include "driverlib/timer.h"

void timerkesmefonksiyonu(void);

int main(void) {
    uint32_t ui32Period;
    SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF); GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0); // timer çevre birimi aktif
    TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC); // sürekli çevrim modu, aþaðýya doðru sayýsý
    ui32Period = (SysCtlClockGet() / 10) / 2; // baþlangýç deðeri
    TimerLoadSet(TIMER0_BASE, TIMER_A, ui32Period -1); // timer ilk deðeri yükleniyor. // 32 bitlik sayýcý
    IntEnable(INT_TIMER0A); // 1. kesme ayarý TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT); // 3. kesme ayarý
    TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
    TimerIntRegister(TIMER0_BASE, TIMER_A, timerkesmefonksiyonu);
    IntMasterEnable(); // 2. kesme ayarý
    TimerEnable(TIMER0_BASE, TIMER_A); // timer çalýþtý
    TimerIntRegister(TIMER0_BASE, TIMER_A, timerkesmefonksiyonu); // Timer kesme fonksiyonu ayarý while(1) { }
}
void timerkesmefonksiyonu(void) {
    TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
    if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_2))
    {
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 0);
    }
    else
    {
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, 4);
    }
}
